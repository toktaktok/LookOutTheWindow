//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""PControl"",
            ""id"": ""d8e5fe9e-e93b-4423-9188-5cbf1841f69a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""07503baf-7f2c-4307-adef-0e65e80a538e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""06dfa283-53fc-40f3-9025-e96ec912c4b0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""a0a64e0e-e3ee-4b9e-b6ff-7d72c7ddd09e"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""2038832e-1173-43c7-a637-1bd3d4f71534"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""ZMove"",
                    ""id"": ""3f1c8a42-4183-4a4d-a2a0-8aa9e5ce6141"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""7aa60f3f-127d-4361-a240-5f7036f4ba78"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""8875ab11-ab89-4dc8-a8f4-ede4c5986c16"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""75e011ee-1a57-4e0b-b520-a4746bfd75cb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""2f87fabc-cf73-4472-aa67-86ba7acae938"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7b81455e-c686-4275-8a71-634896c3a301"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""e9704787-c0ef-4816-a870-4585d25713a9"",
                    ""path"": ""1DAxis(minValue=-5,maxValue=5)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a3812893-ff7e-487f-b815-ceeb4ead4db9"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b29ef445-1781-405e-9411-793039ed101b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""83a21ebd-6937-4ac3-acb6-884271d3767e"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PControl
        m_PControl = asset.FindActionMap("PControl", throwIfNotFound: true);
        m_PControl_Move = m_PControl.FindAction("Move", throwIfNotFound: true);
        m_PControl_Zoom = m_PControl.FindAction("Zoom", throwIfNotFound: true);
        m_PControl_Rotate = m_PControl.FindAction("Rotate", throwIfNotFound: true);
        m_PControl_Interact = m_PControl.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PControl
    private readonly InputActionMap m_PControl;
    private IPControlActions m_PControlActionsCallbackInterface;
    private readonly InputAction m_PControl_Move;
    private readonly InputAction m_PControl_Zoom;
    private readonly InputAction m_PControl_Rotate;
    private readonly InputAction m_PControl_Interact;
    public struct PControlActions
    {
        private @PInput m_Wrapper;
        public PControlActions(@PInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PControl_Move;
        public InputAction @Zoom => m_Wrapper.m_PControl_Zoom;
        public InputAction @Rotate => m_Wrapper.m_PControl_Rotate;
        public InputAction @Interact => m_Wrapper.m_PControl_Interact;
        public InputActionMap Get() { return m_Wrapper.m_PControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PControlActions set) { return set.Get(); }
        public void SetCallbacks(IPControlActions instance)
        {
            if (m_Wrapper.m_PControlActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PControlActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PControlActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PControlActionsCallbackInterface.OnMove;
                @Zoom.started -= m_Wrapper.m_PControlActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_PControlActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_PControlActionsCallbackInterface.OnZoom;
                @Rotate.started -= m_Wrapper.m_PControlActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_PControlActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_PControlActionsCallbackInterface.OnRotate;
                @Interact.started -= m_Wrapper.m_PControlActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PControlActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PControlActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_PControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public PControlActions @PControl => new PControlActions(this);
    public interface IPControlActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
